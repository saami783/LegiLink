# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
    App\Service\FileDownloadHandlerService:
        arguments:
            $projectDir: '%kernel.project_dir%'

    # Configuration du service FileStrategyManagerService
    App\Service\FileStrategyManagerService:
        arguments: # Injection des dépendances via le constructeur
            $documentRepository: '@App\Repository\DocumentRepository' # Injecte le repository de documents
            $tokenStorage: '@security.token_storage' # Injecte le service de stockage du token de sécurité
        calls: # Appels de méthodes après l'instanciation du service
            - [ addStrategy, [ 'md', '@App\Strategy\UpdateMdFileStrategy' ] ] # Ajoute la stratégie pour les fichiers Markdown (.md)
            - [ addStrategy, [ 'doc', '@App\Strategy\UpdateDocFileStrategy' ] ] # Ajoute la stratégie pour les fichiers Word (.doc)
            - [ addStrategy, [ 'docx', '@App\Strategy\UpdateDocxFileStrategy' ] ] # Ajoute la stratégie pour les fichiers Word modernes (.docx)
    # Documentation détaillée :
    #
    # 1. Le service est défini avec son nom complet (FQCN) : App\Service\FileStrategyManagerService
    #
    # 2. Arguments :
    #    - $documentRepository : Injecte le service DocumentRepository pour accéder aux documents
    #    - $tokenStorage : Injecte le service de stockage du token pour l'authentification
    #
    # 3. Appels de méthodes (calls) :
    #    Après l'instanciation du service, la méthode addStrategy est appelée trois fois
    #    pour ajouter les stratégies de mise à jour pour différents types de fichiers :
    #    - 'md' : Utilise UpdateMdFileStrategy pour les fichiers Markdown
    #    - 'doc' : Utilise UpdateDocFileStrategy pour les anciens fichiers Word
    #    - 'docx' : Utilise UpdateDocxFileStrategy pour les fichiers Word modernes
    #
    # Cette configuration permet au FileStrategyManagerService de gérer dynamiquement
    # différentes stratégies de mise à jour en fonction du type de fichier,
    # offrant ainsi une flexibilité pour ajouter ou modifier des stratégies sans
    # changer le code du service lui-même.

    App\Strategy\UpdateMdFileStrategy:
        arguments:
            $storage: '@vich_uploader.storage'